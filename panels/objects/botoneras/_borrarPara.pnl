V 14
2
LANG:10001 0 
LANG:10010 0 
PANEL,-1 -1 381 156 N "LIB_IRC_BLANCO" 0
E E E E E 1 -1 -1 0  30 35
""0  1
E E 4
"CBRef" "1"
"EClose" E
"dpi" "96"
"pdpi" "141.951"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
2
LANG:10001 0 
LANG:10010 0 
13 24
"btnBorrarPara"
""
1 50.00000000000001 75 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
55 0 0 0 0 0
E E E
1
2
LANG:10001 0 
LANG:10010 0 

1
"layoutAlignment" "AlignNone"
2
LANG:10001 30 Noto Sans,-1,16,5,50,0,0,0,0,0
LANG:10010 30 Noto Sans,-1,16,5,50,0,0,0,0,0
0  48.00000000000001 48 341.9999999999999 122

T 
2
LANG:10001 12 PUSH_BUTTON1
LANG:10010 47 BORRAR PARA COMPLETO
MENOS DPTYPE INTERNOS (_*)
"main(mapping event)
{
  dyn_string dps_lista;
  int error_dpt, error_dp;
  dyn_string dptypes_lista;
  string tipoDP;
  this.backCol(\"LIB_IRC_NARANJA_03\");
  this.enabled(FALSE);
  dptypes_lista = dpTypes(\"*\");  //Recuperamos todo el listado de dpTypes del PARA que forman parte de la librería de IRC

  for (int t = 1; t <= dynlen(dptypes_lista); t++)
  {
    tipoDP = dptypes_lista[t];

    if (!tipoDP.startsWith(\"_\"))//Buscamos todos los DPTYPE que no empiezcen por _ para descartar todos los DPType internos de WINCC OA.
    {
      dps_lista = dpNames(\"*\", tipoDP);
      dynSort(dps_lista, FALSE);  //Reordenamos el Array de manera descendente

      for (int a = 1; a <= dynlen(dps_lista); a++)
      {
        error_dp = dpDelete(dps_lista[a]);  //Borramos el DP a
        delay(0, 50);
      }

      error_dpt = dpTypeDelete(tipoDP);  //Borramos el DPT t
      delay(0, 50);
    }
  }

  dptypes_lista = dpTypes(\"*\");  //Recuperamos todo el listado de dpTypes del PARA que forman parte de la librería de IRC

  for (int t = 1; t <= dynlen(dptypes_lista); t++)
  {
    tipoDP = dptypes_lista[t];

    if (!tipoDP.startsWith(\"_\"))//Buscamos todos los DPTYPE que no empiezcen por _ para descartar todos los DPType internos de WINCC OA.
    {
      dps_lista = dpNames(\"*\", tipoDP);
      dynSort(dps_lista, FALSE);  //Reordenamos el Array de manera descendente

      for (int a = 1; a <= dynlen(dps_lista); a++)
      {
        error_dp = dpDelete(dps_lista[a]);  //Borramos el DP a
        delay(0, 50);
      }

      error_dpt = dpTypeDelete(tipoDP);  //Borramos el DPT t
      delay(0, 50);
    }
  }
  this.backCol(\"LIB_IRC_VERDE_01\");
  this.enabled(TRUE);
}" 0
 E E E
0
LAYER, 1 
2
LANG:10001 0 
LANG:10010 0 
0
LAYER, 2 
2
LANG:10001 0 
LANG:10010 0 
0
LAYER, 3 
2
LANG:10001 0 
LANG:10010 0 
0
LAYER, 4 
2
LANG:10001 0 
LANG:10010 0 
0
LAYER, 5 
2
LANG:10001 0 
LANG:10010 0 
0
LAYER, 6 
2
LANG:10001 0 
LANG:10010 0 
0
LAYER, 7 
2
LANG:10001 0 
LANG:10010 0 
0
0
